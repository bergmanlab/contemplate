#!/usr/bin/env python


from sys import *
import sys
import re

class feature:
	def __str__(self):
		return str(self.start)+str(self.stop)+self.strand
	def __repr__(self):
		return str(self.start)+str(self.stop)+self.strand
	"""
	def __init__(self,seq,start,stop,strand,names,line):
		self.seq = seq 
		self.start = start
		self.stop = stop
		self.strand = strand
		self.names = names
		self.line = line
	def __repr__(self):
		return self.seq, self.start+self.stop+self.strand
	"""
	pass
	
def readBed(lines, filternames):
	""" read features from bedfile, accept only those that have a name-field in FILTERS
	"""
	features = {}
	for line in lines:
	  if line.strip()=="":
		  continue
	  if line.startswith("#"):
		  continue
	  if line.startswith("track"):
		  continue
	  if line.startswith("browser"):
		  continue
	  parts = line.split()
	  seq = parts[0]
	  start = int(parts[1])
	  end = int(parts[2])
	  if "&" in parts[3]:
		  names = parts[3].split("&")[1].split(",")
	  elif "=" in parts[3]:
		  names = parts[3].split("=")[1].split(",")
	  names = [s.lower() for s in names]
	  passfilter = False
	  for name in names:
		  if name in filternames:
			  passfilter=True
			  break
	  if not passfilter:
		  continue
          strand = parts[4]
	  rest = parts[5:]
	  f = feature()
	  f.start = int(start)
	  f.end = int(end)
	  f.strand = strand
	  f.names = names
	  f.line = line
	  if features.get(seq)==None:
		  features[seq]=[]
	  features[seq].append(f)
	return features


if len(argv)==1:
  print " Searches a combination of two features separated by a flex. distance."
  print " Input is a bed file read from stdin."
  print " You have to specify the features to search. It is sufficient to give"
  print " PART of the feature-name field: different parts can be separated by"
  print " ',' whereas the part before '&' of every feature-name field will"
  print " be stripped off before processing."
  print
  print " Output is a new bed file where only the combinations are kept"
  print " and for every combation a new feature is added."
  print " "
  print " SAMPLE:"
  print "  seq1 1  10 T1000&TF1,TF2,TF3 +"
  print "  seq1 20 30 T2222&TF2,xzizzy,potz +" 
  print 
  print " SYNTAX: "
  print " cat test.bed TF1 TF2 1 20 | "+argv[0]+" test.fa "
  exit() 

name1 = argv[1].lower()
name2 = argv[2].lower()
mindist = int(argv[3])
maxdist = int(argv[4])

# read lines from file, filter out all that do not contain name1,name2
lines = sys.stdin.readlines()
allfts = readBed(lines, [name1, name2])
del lines

for seq, fts in allfts.iteritems():
	# split features in two separte lists
	fts1 = [f for f in fts if name1 in f.names]
	fts2 = [f for f in fts if name2 in f.names]

	# compare every one from one list with every one of the second
	for ft1 in fts1:
		for ft2 in fts2:
			if ft1.end+mindist <= ft2.start <= ft1.end+maxdist:
				print ft1.line
				print ft2.line
				print seq, ft1.start, ft2.end, "Combination_"+name1+"_"+name2, ft1.strand

