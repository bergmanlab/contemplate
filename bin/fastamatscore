#!/usr/bin/env python


from sys import *
import sys
import re
from math import log

def readfasta(lines):
  ## will read from lines
  ## will return a list of n seqs
  ## seq[n][0] is the seqname
  ## seq[n][1] is the sequence
  seqs = []
  for line in lines:
	  if line.startswith(">"):
	    seqs.append([line.strip(">").split()[0], ""])
	  else:
            seqs[-1][1]+=line.replace(" ","").strip()
  return seqs

def revComp(seq):
    table = { "a" : "t", "A" : "T", "t" : "a", "T" : "A", "c" : "g", "C":"G", "g":"c", "G":"C", "-":"-", "N": "N", "n" : "n" }
	newseq = ""
        for nucl in reversed(seq):
           newseq += table[nucl]
	return newseq

def readmat(lines):
	### will read matrices from file
	### example matrix: 
	### P0 A C T G
	### 01 1 2 0 2
	### 02 1 2 3 0 
    mat = []
    for line in lines:
      if line.startswith("#"):
	    continue
      if line.startswith("AC") or line.startswith("ID"):
	    continue
      if line.startswith("P0"):
	    continue
      if line.startswith("XX") or line.startswith("//"):
            break
      counts = line.split()[1:]
      counts = [int(x) for x in counts]
      total = sum(counts)
      # count -> freq
      freq = [float(x)/total for x in counts]
      # freq -> pseudofreq
      freq = [x + 0.001 for x in freq]
      # list -> hash for eaiser scanning
      probs = {'a': freq[0], 'c':freq[1], 'g':freq[2], 't':freq[3]}
      mat.append(probs)
    return mat

def calcminmaxscore(mat, cons):
	### calc minimum/maximum possible score for a matrix
	### see match paper
	maxscore = float(0)
	minscore = float(0)
	for pos in range(0, len(mat)):
		probs = mat[pos]
		IC = cons[pos]
		maxscore+=max(probs.values())*IC
		minscore+=min(probs.values())*IC
	return (minscore, maxscore)
		    

def p(x,n):
	# return x/n as a string
	return "%.2f" % (x / float(n))
	minscore = float(0)


def calcconservation(mat):
	# calculates the Ci-vector as explained
	# in Kel 03, a value in 0..100
	# for every pos in the matrix that describes 
	# the conservation of a position
	# and is used to scale the pos-scores.
	C = []
	# print mat
	for probs in mat:
		ics = [(p * log(4*p)) for p in probs.values()]	
		C.append(sum(ics))
	return C


if len(argv)==1:
  print " Will print the score of sequences against a matrix."
  print " Will read fasta files from stdin."
  print
  print " SYNTAX: "
  print " matscan <matrix-file-transfac-format>"
  exit() 

lines = sys.stdin.readlines()

seqs = readfasta(lines)
del lines
n = len(seqs)

f = open(argv[1],'r')
mat = readmat(f.readlines())
cons = calcconservation(mat)
minscore, maxscore = calcminmaxscore(mat, cons)
# print cons

#print mat

if not len(mat)==len(seqs[0][1]):
	print "matrix length != sequence length!!"
	exit(1)
for seq in seqs:
	print seq[0],
	current = 0
	nucseq = seq[1]
	for pos in range(0, len(nucseq)):
		nuc = nucseq[pos].lower()
		probs = mat[pos]
		IC = cons[pos]
		current += probs[nuc]*IC
	score = (current - minscore) / (maxscore - minscore)
	#print score, current, minscore, maxscore
	print score
	
