#!/usr/bin/python

import PWMslow
import bed
from Fasta import *
from SeqWindow import *
from MultiAlign2Block import *
from sys import *
from optparse import OptionParser
import WindowIterator
import itertools
from os import environ

# === COMMAND LINE INTERFACE, OPTIONS AND HELP ===
parser = OptionParser("usage: %prog [options] sequence-files\nScans multiple alignments for conserved transcription factor binding matrices.") 

parser.add_option("-i", "--id", dest="matrices", action="append", help="specify matrix id (example: V$FOXI_Q2, meaning vertebrate, Forkheadbox I, Quality 2). Take care to escape $-signs from the shell and makefiles. Separate the cutoff with '/' (Example: V$FOXI_Q2/0.9). Default value for cutoff is 0.75. You can specify this option multiple times. If you don't specify it at all, sequences will be scanned for all matrices in the file (this is SLOW at the moment).", type="string", metavar="'ID'") 

parser.add_option("-o", "--org", dest="org", action="store", help="the organism where the matrix HAS to be conserved [defaults %default]", type="string", metavar="'STRING'", default="hg17") 

parser.add_option("-c", "--conservation", dest="minseqs", action="store", help="the minimum number of sequences where the PWMs have to be conserved [default: %default]", type="int", metavar="NUMBER", default="4") 

parser.add_option("-t", "--tffile", dest="matrixfile", action="store", help="the name of the file matrix.dat from Transfac/Jaspar/Genomatix, the default value is taken from the environment variable TFMATPATH [default: %default]", type="string", metavar="PATH", default=environ["TFMATPATH"]) 

parser.add_option("-f", "--fasta", dest="maf", action="store_false", help="specify that your sequences are in fasta format. If you specify fasta, put ONE multiple alignment into ONE fasta file. seqs have to look like UCSC-seqs ('range=ch4:1-10', etc)") 

parser.add_option("-m", "--maf", dest="maf", action="store_true", help="sequences should be parsed as maf-files. You cannot combine -f and -m.", default="True") 

parser.add_option("-l", "--list", dest="list", action="store_true", help="list all pwms that are included in the matrix.dat-file. Will cancel all other options.") 

parser.add_option("-n", "--name", dest="trackname", action="store", help="add a track line with the specified name/description, defaults to 'multiscan_cutoffXX_conservedX'. ") 

parser.add_option("", "--core", dest="coreminimum", action="store", help="minimum core similarity [default: %default]", default="0.9", type="float", metavar="NUMBER") 

parser.add_option("", "--minsites", dest="minsites", action="store", help="remove matrices that have been assembled with less than x sites [default: %default]", default="6", type="int", metavar="NUMBER") 

parser.add_option("-s", "--snp", dest="snpfile", action="store", help="report only those matrix hits that have a core nucleotide (five most conserved of the matrix) at a position specified by a file (UCSC bed-format). Use this option if you have already done mutational experiments with your cis-regulatory region and identified positions that stop expression when mutated.", type="string", metavar="BEDFILE") 

parser.add_option("-x", "--exclude", dest="excludefile", action="store", help="a list of matrix-ids, one per line, that is excluded from the search. You can put matrices here that you're either not interested in or whose quality is too low.", metavar="TXTFILE") 

#parser.add_option("-s", "--singleseq", dest="singleseq", action="store_true", help="add this if you only want to scan the first sequence", default="False") 
(options, args) = parser.parse_args()

# ==== FUNCTIONs =====
def overlap(f, features):
    """ returns only those features from FEATURES that overlap f """
    overlap = []
    start = f.start
    end = f.end
    for f2 in features: 
        if (( f2.start <= start and f2.end >= start) or \
            (f2.start <= end and f2.end >= end)):
            overlap.append(f2)
    return overlap

def annotateMatches(aligns, regpwms):
    for block in aligns:
            for seq in block.values():
                matches = {}
                for pwm in regpwms:
                    winsize = len(pwm)
                    wi = WindowIterator.subseq_generator(seq, winsize)
                    for subseq in wi:
                        match = pwm.match(subseq, coreminimum, pwm.cutoff)
                        if match!=None:
                            matid = match.name
                            if matches.get(matid)==None:
                                matches[matid]=[]
                            matches[matid].append(match)
                seq.matches = matches

class BlockPWMScanner:
    """ scans blocks for a PWM and print those that match that fulfill the thresholds and
    are located on the specified organism. """

    def __init__(self, pwm, corethreshold, threshold, minmatch, org, snppos):
        self.pwm = pwm
        self.threshold = threshold
        self.corethreshold = corethreshold
        self.minmatch=minmatch
        self.org = org
        self.snppos = snppos

    def scan(self, block,strand):
        match = 0
        org_score=0.0
        score = 0.0
        for ss in block:
            if ss.getUngapLength<len(pwm):
                print "break"
                break
            seq = ss.getUngapNucl()
            if strand=="-":
                seq = revcomp(seq)
            core, matscore = self.pwm.score(seq, self.corethreshold)
            if matscore >= self.threshold:
                match += 1
            if ss.seq.getID()==self.org:
                org_score=matscore
        if match >= self.minmatch:
            # check if there is any overlap between pwm-conserved and snp-positions
            # return is there isn't
            if len(snppos)!=0:
                start = block.getBlockPos(self.org)
                conservedPos = [x+start for x in self.pwm.mostConserved]
                conservedPos = set(conservedPos)
                overlap = conservedPos.intersection(self.snppos)
                if len(overlap)==0:
                    return
            print block.getBedLine(self.org)+" "+self.pwm.id+" %3d" % (org_score*1000)+" "+strand

# -----------------
matrixfile = options.matrixfile
matrixids = options.matrices
minseqs = options.minseqs
baseorg = options.org
coreminimum = options.coreminimum
snpfile = options.snpfile
excludefile = options.excludefile
minsites = options.minsites

if matrixids==[]:
    sys.stderr.write("No matrix specified with -i option, scanning for all matrices.\n")
    exit(1)
if args==[]:
    sys.stderr.write("\nNo sequence files specified. Use -h for help. \n")
    exit(1)

sys.stderr.write("Parsing matrix file...\n")
pwms = PWM.readMatrices(matrixfile)
if len(pwms)==0:
    sys.stderr.write("Could not parse matrix.dat-file from "+matrixfile+"\n")
    exit(1)

# remove pwms that are excluded
i = 0
if excludefile!=None:
    lines = open(excludefile, "r").readlines()
    for l in lines:
        id = l.strip()
        if id in pwms.keys():
            del pwms[id]
            i += 1
sys.stderr.write(" Removed %u matrices due to an exclusion file.\n" % i)

if options.list:
    print pwms
    exit(0)

trackname = options.trackname
if trackname==None:
    trackname="multiscan_conserved=%u" % minseqs

# remove pwms that are assembled from less than MINSITE (def: 6) sites, if they have int-counts
count = 0
delmats = []
if minsites!=0:
    for id, pwm in pwms.iteritems(): 
        if pwm.float:
            continue
        row1val = pwm.weights[0].values()
        s = sum(row1val)
        if s < 6.0:
            count += 1
            delmats.append(id)
for m in delmats:
    del pwms[m]
sys.stderr.write(" Removed %u matrices because they did not contain more than %u sites.\n" % (count, minsites))

# parse pwm from cmdline
pwmcutoffs = []
for p in matrixids:
    parts = p.split("/")
    id = parts[0]
    if len(parts)>1:
        cutoff = float(p.split("/")[1])
        if id.lower()=="all":
            # add all ids to list
            for id in pwms.keys():
                pwmcutoffs.append((id,cutoff))
            break
    else:
        cutoff = 0.75
    pwmcutoffs.append( (id,cutoff) )

# init pwms
sys.stderr.write("Regularizing matrices...\n")
regpwms = []
for pwmid,cutoff in pwmcutoffs:
    try:
        pwm = pwms[pwmid]
    except KeyError:
        sys.stderr.write("Matrix ID "+pwmid+" not found in transfac file!")
        exit(1)
    pwm.prepareScoring()
    pwm.cutoff = cutoff
    regpwms.append(pwm)

del pwmcutoffs

blocks = []
# read seqs
for file in args:
    if options.maf:
        blocks.extend(readMaf(file))
    else:
       blocks.append(readFasta(file))

# read mutations/snps
snppos = []
if snpfile!=None:
    lines = open(snpfile,"r").readlines()
    features = bed.parseBedFile(lines)
    for f in features:
        snppos.append(f.start)
        if not f.start==f.end-1:
            sys.stderr.write("\nEvery feature in snpfile should only cover one basepair.\n"+\
                    "The following line does not seem to follow this rule:\n"+\
                    repr(f))
            exit(1)
snppos = set(snppos)


# scan all seqs for all pwms
sys.stderr.write("Scanning with %u matrices..." % len(regpwms))
annotateMatches(blocks, regpwms)
sys.stderr.write("Search for overlapping matches...")

print 'track name="%s" description="%s" useScore=1 visibility=pack url="http://www.biobase.de/cgi-bin/biobase/transfac/9.4/bin/getTFProf.cgi?$$"'% (trackname,trackname)

# keep only those matches from the main seq that overlap at least minseqs matches on other sequences
for block in blocks:
    baseseq = block[baseorg]
    otherseqs = [seq for seqid,seq in block.iteritems() if seqid!=baseorg]

    for matches in baseseq.matches.values():
        for match in matches:
            #print match
            matid = match.name
            matchcount = 1
            for seq in otherseqs:
                othermatches = seq.matches.get(matid, [])
                overlaps = overlap(match, othermatches)
                if overlaps!=[]:
                    matchcount +=1
            # check that match fullfills minseq and snppos constraints
            if matchcount >= minseqs and (len(snppos)==0 or len(match.conservedPos().intersection(snppos))!=0):
                print match.getBedLine()


    
