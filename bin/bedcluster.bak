#!/usr/bin/python

from bed import *
import sys
from optparse import OptionParser

# === COMMAND LINE INTERFACE, OPTIONS AND HELP ===
parser = OptionParser("usage: %prog [options] args\nReturns regions of sequence that include at least x feature-names. bed-file has to be sorted!") 

parser.add_option("-w", "--winsize", dest="winsize", help="size of clustering window [default: %default]", type="int", default="50", metavar="SIZE")

parser.add_option("-n", "--name", dest="names", action="append", help="specify name to search for (can be used multiple times), separate number of minimal number of instances in window separated with ':', e.g. V$FOX_Q2:2", type="string", metavar="STRING") 

parser.add_option("-d", "--mindist", dest="distcond", action="append", help="specify minimum distance between two names, format name1,name2=dist, e.g. V$FOX-V$PITX_Q2:50", type="string", metavar="NAME1,NAME2=DIST-DIST") 

parser.add_option("-q", "--quiet", dest="quiet", action="store_true", help="supress debugging output",default="False") 

parser.add_option("-t", "--tripledist", dest="triplecond", action="append", help="triple distance condition, e.g. -t f1,f2,f3=10-20,30-40, NO REVERSE STRAND YET", type="string", metavar="" ) 
(options, args) = parser.parse_args()

# ==== FUNCTIONs =====
class FeatureWindow:
    def __init__(self, features, winsize):
        self.features = features
        self.winSize = winsize
        self.counts = {}
        self.winStart = features[0].start
        self.winEnd = self.winStart+self.winSize
        self.lastPos = features[-1].end
        self.winFeatures = [] # features currently in the window
        self.seqID=features[0].chrom
        self._fillWindow()

    def __repr__(self):
        d = []
        d.append("======WINDOW:========")
        d.append("start = "+str(self.winStart))
        d.append("end = "+str(self.winEnd))
        for k, v in self.counts.iteritems():
            d.append("occurences of "+k+" = "+repr(v))
        d.append("--FEATURES:--")
        for f in self.winFeatures:
            d.append(repr(f))
        d.append("=====================")
        return "\n".join(d)
    
    def shiftRight(self):
        """ shift window to the right by one feature and then delete/insert features"""
        if self.features==[]:
            raise StopIteration
        nextF = self.features[0]
        diff = nextF.start - self.winEnd + 1
        self.winEnd+=diff
        self.winStart+=diff
        # remove on the left side and ajust counts
        for i in reversed(range(0, len(self.winFeatures))):
            f = self.winFeatures[i]
            if f.start<self.winStart:
                self.counts[f.name]-=1
                del self.winFeatures[i]

        # add on the right side and ajust counts
        self._fillWindow()

    def _fillWindow(self):
        """ takes new features from self.features and put them into the window
        until no more features are covered by the window """
        while self.features!=[] and self.features[0].start<self.winEnd:
            f = self.features.pop(0)
            if f.start < self.winStart:
                raise RuntimeError, "The bed file has to be sorted!"
            self.winFeatures.append(f)
            if not f.name in self.counts.keys():
                self.counts[f.name]=0
            self.counts[f.name]+=1

#    ------- CLASS CONSTRAINTS -----------------

class DistConstraint:
    def __init__(self,name1, name2, mindist, maxdist):
        self.n1 = name1
        self.n2 = name2
        self.mindist = mindist
        self.maxdist = maxdist

    def fulfilled(self, f1, f2):
        dist = abs(f1.start-f2.start)
        if dist<=self.maxdist and dist>=self.mindist:
            return True
        else:
            return False

    def __repr__(self):
        return 'DistConstraint("%s", "%s", %u, %u)' % (self.n1,self.n2,self.mindist,self.maxdist)

def absRange(x, min, max):
    """ returns true if x is between min and max"""
     #x = abs(x)
    return (x>= min) and (x<=max)

class TripleDistConstraint:
    def __init__(self,names, dists):
        self.names = names
        self.mindists = []
        self.maxdists = []
        self.mindists.append(int(dists[0][0]))
        self.maxdists.append(int(dists[0][1]))
        self.mindists.append(int(dists[1][0]))
        self.maxdists.append(int(dists[1][1]))

    def fulfilled(self, featurewin):
        # create dict on feature names
        name2ftlst = {}
        for f in featurewin.winFeatures:
            name = f.name
            if not name in featurewin.winFeatures:
                name2ftlst[name]=[]
            name2ftlst[name].append(f)
        # search for names
        min0 = self.mindists[0]
        max0 = self.maxdists[0]
        min1 = self.mindists[1]
        max1 = self.maxdists[1]
        for f1 in name2ftlst[self.names[0]]:
            for f2 in name2ftlst[self.names[1]]:
                if not absRange(f2.start-f1.start, min0, max0):
                    continue
                else:
                    for f3 in name2ftlst[self.names[2]]:
                        if not absRange(f3.start-f2.start, min1, max1):
                            continue
                    else:
                        return True

    def __repr__(self):
        return 'TripleDistConstraint(names %s, mindists %s, maxdists %s)' % (self.names,self.mindists,self.maxdists)

#    ******* CLASS CONSTRAINTS *****************

def parseConstraints(options, names):
    """ parses constraints from cmdline and returns them as a list of constraints objects. will add all names to the names-dict with min-occurence 1, if they don't exist in there yet. Will increase namecount in names-dict if they exist."""
    list = []
    if options.distcond!=None:
        for d in options.distcond:
            parts = d.strip().split("=")
            factors = parts[0].split(",")
            dists = parts[1].split("-")
            if not factors[1] in names:
                names[factors[1]]=1
            if not factors[0] in names:
                names[factors[0]]=1
            constr = DistConstraint(factors[0], factors[1], int(dists[0]),int(dists[0]))
            list.append(constr)

    if options.triplecond!=None:
        for d in options.triplecond:
            parts = d.strip().split("=")
            factors = parts[0].split(",")
            distsparts = parts[1].split(",")
            dists = [p.split("-") for p in distsparts]
            for n in factors:
                if not n in names.keys():
                    names[n]=1
            constr = TripleDistConstraint(factors, dists)
            list.append(constr)

    return list
            
def allConstraintsTrue(featurewin, names, constr):
    """ checks if window fulfills constraints and prints its position if yes """
    
    # check if enough features in window (to save time)
    for name, minOcc in names.iteritems():
        if featurewin.counts.get(name,0)<minOcc:
            return False

    # check constraints
    if constr==None:
        return True
    for c in constr:
        val = c.fulfilled(featurewin)
        return val
#    constrValues = [ len(constr)*[False]]
#    marks=[]
#    if options.distcond!=None:
#        for f1 in featurewin.winFeatures:
#            for f2 in featurewin.winFeatures:
#                if f1!=f2:
#                    for i in xrange(len(constr)):
#                        c = constr[i]
#                        if c.fulfilled(f1,f2):
#                            constrValues[i-1]=True;
#                            marks.append(f1)
#                            marks.append(f2)
#
#    for v in constrValues:
#        if v==False:
#            return False
    return True

def printHit(fw,names):
    """ prints a hit given a featureWindow """
    # prepare print
    x=[]
    for name in names:
        count = fw.counts.get(name)
        if count>0:
            x.append(name+":"+str(fw.counts.get(name)))

    print fw.seqID, fw.winStart, fw.winEnd, "_".join(x)
    for f in fw.winFeatures:
        if f.name in names:
            print f

     
# ==== MAIN ====
if len(args)==0:
    sys.stderr.write("\nPlease specify a bed-file. Use '-h' for help. \n")
    sys.exit(1)

if options.distcond==None and options.names==None and options.triplecond==None:
    sys.stderr.write("\nYou have to specify at least one condition. Use -h for help. \n")
    sys.exit(1)

names = {}
if options.names!=None:
    for name in options.names:
        parts = name.split(":")
        if len(parts)==2:
            names[parts[0]]=int(parts[1])
        else:
            names[parts[0]]=1

constr = parseConstraints(options, names)

if not options.quiet:
    sys.stderr.write("Searching for the following occurences: %s \n" % str(names))
    sys.stderr.write("Search Window Size: %u\n" % options.winsize)
    sys.stderr.write("Conditions: %s \n" % str(constr))

for filename in args:
    sys.stderr.write("Scanning file %s\n" % filename)
    lines = open(filename, "r").readlines()
    fts = parseBedFile(lines)
    fw = FeatureWindow(fts, options.winsize)

    stop=False
    while stop==False:
        try:
            if allConstraintsTrue(fw, names, constr):
                printHit(fw,names)
            fw.shiftRight()
        except StopIteration:
            stop=True





